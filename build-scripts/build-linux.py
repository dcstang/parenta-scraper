#!/usr/bin/env python3
"""
Linux build script for Parenta Scraper
Creates Linux distribution with Chrome install helpers
"""
import os
import sys
import shutil
import subprocess
import tarfile
from pathlib import Path

def main():
    print("[LINUX] Building Parenta Scraper for Linux...")
    
    # Paths
    script_dir = Path(__file__).parent
    root_dir = script_dir.parent
    dist_dir = root_dir / "dist"
    build_dir = root_dir / "build"
    
    # Clean previous builds
    print("[CLEAN] Cleaning previous builds...")
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
    if build_dir.exists():
        shutil.rmtree(build_dir)
    
    # Build with PyInstaller
    print("[PACK] Building executable with PyInstaller...")
    spec_file = "build-scripts/linux.spec"
    cmd = [sys.executable, "-m", "PyInstaller", spec_file, "--clean"]
    
    result = subprocess.run(cmd, cwd=root_dir, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"ERROR: PyInstaller failed:")
        print(result.stderr)
        return False
    
    print("SUCCESS: PyInstaller build completed")
    
    # Create Linux-specific files
    print("[DOC] Creating Linux integration files...")
    app_dir = dist_dir / "ParentaScraper"
    create_linux_readme(app_dir)
    create_chrome_install_script(app_dir)
    create_desktop_file(app_dir)
    create_launcher_script(app_dir)
    
    # Create tar.gz package
    print("[PACK] Creating tar.gz package...")
    tar_path = create_tar_package(app_dir, dist_dir / "ParentaScraper-Linux.tar.gz")
    
    print(f"SUCCESS: Linux build complete: {tar_path}")
    print(f"Build directory: {app_dir}")
    
    return True

def create_linux_readme(app_dir):
    """Create README for Linux users"""
    readme_content = """# Parenta Scraper for Linux

## Installation
1. Extract the tar.gz file
2. Run the installer: `./install.sh`
3. Or run directly: `./ParentaScraper`

## Requirements
- Linux (Ubuntu 18.04+, Fedora 30+, or equivalent)
- Chrome or Chromium browser
- Internet connection
- Valid Parenta nursery account

## Chrome/Chromium Installation
If you don't have Chrome installed, run:
```bash
./install-chrome.sh
```

Or install manually:
- **Ubuntu/Debian**: `sudo apt install chromium-browser`
- **Fedora**: `sudo dnf install chromium`
- **Arch**: `sudo pacman -S chromium`
- **openSUSE**: `sudo zypper install chromium`

## Quick Start
1. Run `./ParentaScraper` (or use desktop launcher)
2. Enter your Parenta login credentials
3. Click "Test (Last 20)" to try it out
4. Click "Full Scrape" to download all your photos

## What it does
- Downloads all photos and videos from your Parenta nursery account
- Saves photos to your home directory in `Nursery_Downloads_[Mode]` folder
- Creates a CSV file with all the post data

## Desktop Integration
To add to applications menu:
```bash
cp ParentaScraper.desktop ~/.local/share/applications/
```

## Troubleshooting
- **"Chrome not found"**: Install Chrome/Chromium (see above)
- **"Permission denied"**: Run `chmod +x ParentaScraper`
- **GUI issues**: Make sure you have X11 or Wayland display
- **Dependencies**: Run `./install-chrome.sh` to check requirements

## File Locations
- **Executable**: `./ParentaScraper`
- **Photos saved to**: `~/Nursery_Downloads_[Mode]/`
- **CSV data saved to**: `~/Nursery_Data_[Mode].csv`

## Support
For issues, visit: https://github.com/[your-username]/parenta-scraper/issues

Generated by Parenta Scraper build system
"""
    
    readme_path = app_dir / "README.txt"
    readme_path.write_text(readme_content)

def create_chrome_install_script(app_dir):
    """Create Chrome installation script for different distros"""
    script_content = """#!/bin/bash
# Chrome/Chromium installation script for Parenta Scraper

echo "[DETECT] Detecting Linux distribution..."

# Detect distribution
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
    VERSION=$VERSION_ID
else
    echo "ERROR: Cannot detect Linux distribution"
    exit 1
fi

echo "[INFO] Detected: $PRETTY_NAME"

# Check if Chrome/Chromium already installed
if command -v google-chrome >/dev/null 2>&1; then
    echo "SUCCESS: Google Chrome is already installed"
    google-chrome --version
    exit 0
fi

if command -v chromium-browser >/dev/null 2>&1; then
    echo "SUCCESS: Chromium is already installed"
    chromium-browser --version
    exit 0
fi

if command -v chromium >/dev/null 2>&1; then
    echo "SUCCESS: Chromium is already installed"
    chromium --version
    exit 0
fi

echo "[PACK] Installing Chrome/Chromium for your distribution..."

case "$DISTRO" in
    ubuntu|debian)
        echo "[INSTALL] Installing Chromium on Ubuntu/Debian..."
        sudo apt update
        sudo apt install -y chromium-browser
        ;;
    fedora)
        echo "[INSTALL] Installing Chromium on Fedora..."
        sudo dnf install -y chromium
        ;;
    arch|manjaro)
        echo "[INSTALL] Installing Chromium on Arch Linux..."
        sudo pacman -S chromium --noconfirm
        ;;
    opensuse*)
        echo "[INSTALL] Installing Chromium on openSUSE..."
        sudo zypper install -y chromium
        ;;
    centos|rhel)
        echo "[INSTALL] Installing Chromium on CentOS/RHEL..."
        sudo yum install -y epel-release
        sudo yum install -y chromium
        ;;
    *)
        echo "Unknown distribution: $DISTRO"
        echo "[NOTE] Please install Chrome or Chromium manually:"
        echo "   - Visit: https://www.google.com/chrome/"
        echo "   - Or install Chromium from your package manager"
        exit 1
        ;;
esac

# Verify installation
if command -v google-chrome >/dev/null 2>&1; then
    echo "SUCCESS: Google Chrome installed successfully!"
    google-chrome --version
elif command -v chromium-browser >/dev/null 2>&1; then
    echo "SUCCESS: Chromium installed successfully!"
    chromium-browser --version
elif command -v chromium >/dev/null 2>&1; then
    echo "SUCCESS: Chromium installed successfully!"
    chromium --version
else
    echo "ERROR: Installation may have failed. Please check manually."
    exit 1
fi

echo "[SUCCESS] Ready to run Parenta Scraper!"
"""
    
    script_path = app_dir / "install-chrome.sh"
    script_path.write_text(script_content)
    script_path.chmod(0o755)  # Make executable

def create_desktop_file(app_dir):
    """Create .desktop file for GUI integration"""
    desktop_content = """[Desktop Entry]
Version=1.0
Type=Application
Name=Parenta Scraper
Comment=Download photos from Parenta nursery portal
Exec={exec_path}/ParentaScraper
Icon={exec_path}/icon.png
Terminal=false
Categories=Network;Photography;Utility;
Keywords=parenta;nursery;photos;scraper;download;
StartupNotify=true
""".format(exec_path=app_dir.absolute())
    
    desktop_path = app_dir / "ParentaScraper.desktop"
    desktop_path.write_text(desktop_content)
    desktop_path.chmod(0o755)  # Make executable

def create_launcher_script(app_dir):
    """Create launcher script that handles common issues"""
    launcher_content = """#!/bin/bash
# Parenta Scraper Launcher Script

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
EXECUTABLE="$SCRIPT_DIR/ParentaScraper"

echo "[START] Starting Parenta Scraper..."

# Check if executable exists
if [ ! -f "$EXECUTABLE" ]; then
    echo "ERROR: ParentaScraper executable not found at: $EXECUTABLE"
    exit 1
fi

# Make sure it's executable
chmod +x "$EXECUTABLE"

# Check for display (GUI requirement)
if [ -z "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; then
    echo "ERROR: No display found. Make sure you're running in a GUI environment."
    exit 1
fi

# Check for Chrome/Chromium
if ! command -v google-chrome >/dev/null 2>&1 && ! command -v chromium-browser >/dev/null 2>&1 && ! command -v chromium >/dev/null 2>&1; then
    echo "WARNING:  Chrome/Chromium not found. Running install script..."
    "$SCRIPT_DIR/install-chrome.sh"
fi

# Run the application
echo "[RUN]  Launching application..."
cd "$SCRIPT_DIR"
"$EXECUTABLE"
"""
    
    launcher_path = app_dir / "run-parenta-scraper.sh"
    launcher_path.write_text(launcher_content)
    launcher_path.chmod(0o755)  # Make executable

def create_tar_package(source_dir, tar_path):
    """Create tar.gz package for distribution"""
    with tarfile.open(tar_path, 'w:gz') as tar:
        tar.add(source_dir, arcname=source_dir.name)
    return tar_path

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)